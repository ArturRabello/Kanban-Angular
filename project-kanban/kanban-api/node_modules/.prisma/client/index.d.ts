
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Boards
 * 
 */
export type Boards = $Result.DefaultSelection<Prisma.$BoardsPayload>
/**
 * Model Columns
 * 
 */
export type Columns = $Result.DefaultSelection<Prisma.$ColumnsPayload>
/**
 * Model Tasks
 * 
 */
export type Tasks = $Result.DefaultSelection<Prisma.$TasksPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Boards
 * const boards = await prisma.boards.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Boards
   * const boards = await prisma.boards.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.boards`: Exposes CRUD operations for the **Boards** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boards
    * const boards = await prisma.boards.findMany()
    * ```
    */
  get boards(): Prisma.BoardsDelegate<ExtArgs>;

  /**
   * `prisma.columns`: Exposes CRUD operations for the **Columns** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Columns
    * const columns = await prisma.columns.findMany()
    * ```
    */
  get columns(): Prisma.ColumnsDelegate<ExtArgs>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **Tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.TasksDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Boards: 'Boards',
    Columns: 'Columns',
    Tasks: 'Tasks'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'boards' | 'columns' | 'tasks'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Boards: {
        payload: Prisma.$BoardsPayload<ExtArgs>
        fields: Prisma.BoardsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BoardsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BoardsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          findFirst: {
            args: Prisma.BoardsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BoardsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          findMany: {
            args: Prisma.BoardsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>[]
          }
          create: {
            args: Prisma.BoardsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          createMany: {
            args: Prisma.BoardsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BoardsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          update: {
            args: Prisma.BoardsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          deleteMany: {
            args: Prisma.BoardsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BoardsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BoardsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BoardsPayload>
          }
          aggregate: {
            args: Prisma.BoardsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBoards>
          }
          groupBy: {
            args: Prisma.BoardsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BoardsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BoardsCountArgs<ExtArgs>,
            result: $Utils.Optional<BoardsCountAggregateOutputType> | number
          }
        }
      }
      Columns: {
        payload: Prisma.$ColumnsPayload<ExtArgs>
        fields: Prisma.ColumnsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColumnsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColumnsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>
          }
          findFirst: {
            args: Prisma.ColumnsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColumnsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>
          }
          findMany: {
            args: Prisma.ColumnsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>[]
          }
          create: {
            args: Prisma.ColumnsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>
          }
          createMany: {
            args: Prisma.ColumnsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ColumnsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>
          }
          update: {
            args: Prisma.ColumnsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>
          }
          deleteMany: {
            args: Prisma.ColumnsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ColumnsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ColumnsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ColumnsPayload>
          }
          aggregate: {
            args: Prisma.ColumnsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateColumns>
          }
          groupBy: {
            args: Prisma.ColumnsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ColumnsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ColumnsCountArgs<ExtArgs>,
            result: $Utils.Optional<ColumnsCountAggregateOutputType> | number
          }
        }
      }
      Tasks: {
        payload: Prisma.$TasksPayload<ExtArgs>
        fields: Prisma.TasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TasksFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TasksFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          findFirst: {
            args: Prisma.TasksFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TasksFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          findMany: {
            args: Prisma.TasksFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>[]
          }
          create: {
            args: Prisma.TasksCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          createMany: {
            args: Prisma.TasksCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TasksDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          update: {
            args: Prisma.TasksUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          deleteMany: {
            args: Prisma.TasksDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TasksUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TasksUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TasksPayload>
          }
          aggregate: {
            args: Prisma.TasksAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTasks>
          }
          groupBy: {
            args: Prisma.TasksGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.TasksCountArgs<ExtArgs>,
            result: $Utils.Optional<TasksCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BoardsCountOutputType
   */

  export type BoardsCountOutputType = {
    column: number
  }

  export type BoardsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    column?: boolean | BoardsCountOutputTypeCountColumnArgs
  }

  // Custom InputTypes
  /**
   * BoardsCountOutputType without action
   */
  export type BoardsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BoardsCountOutputType
     */
    select?: BoardsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BoardsCountOutputType without action
   */
  export type BoardsCountOutputTypeCountColumnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnsWhereInput
  }


  /**
   * Count Type ColumnsCountOutputType
   */

  export type ColumnsCountOutputType = {
    task: number
  }

  export type ColumnsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    task?: boolean | ColumnsCountOutputTypeCountTaskArgs
  }

  // Custom InputTypes
  /**
   * ColumnsCountOutputType without action
   */
  export type ColumnsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColumnsCountOutputType
     */
    select?: ColumnsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ColumnsCountOutputType without action
   */
  export type ColumnsCountOutputTypeCountTaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Boards
   */

  export type AggregateBoards = {
    _count: BoardsCountAggregateOutputType | null
    _min: BoardsMinAggregateOutputType | null
    _max: BoardsMaxAggregateOutputType | null
  }

  export type BoardsMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BoardsMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type BoardsCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type BoardsMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type BoardsMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type BoardsCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type BoardsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to aggregate.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Boards
    **/
    _count?: true | BoardsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BoardsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BoardsMaxAggregateInputType
  }

  export type GetBoardsAggregateType<T extends BoardsAggregateArgs> = {
        [P in keyof T & keyof AggregateBoards]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoards[P]>
      : GetScalarType<T[P], AggregateBoards[P]>
  }




  export type BoardsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BoardsWhereInput
    orderBy?: BoardsOrderByWithAggregationInput | BoardsOrderByWithAggregationInput[]
    by: BoardsScalarFieldEnum[] | BoardsScalarFieldEnum
    having?: BoardsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BoardsCountAggregateInputType | true
    _min?: BoardsMinAggregateInputType
    _max?: BoardsMaxAggregateInputType
  }

  export type BoardsGroupByOutputType = {
    id: string
    name: string
    _count: BoardsCountAggregateOutputType | null
    _min: BoardsMinAggregateOutputType | null
    _max: BoardsMaxAggregateOutputType | null
  }

  type GetBoardsGroupByPayload<T extends BoardsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BoardsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BoardsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BoardsGroupByOutputType[P]>
            : GetScalarType<T[P], BoardsGroupByOutputType[P]>
        }
      >
    >


  export type BoardsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    column?: boolean | Boards$columnArgs<ExtArgs>
    _count?: boolean | BoardsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["boards"]>

  export type BoardsSelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type BoardsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    column?: boolean | Boards$columnArgs<ExtArgs>
    _count?: boolean | BoardsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BoardsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Boards"
    objects: {
      column: Prisma.$ColumnsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["boards"]>
    composites: {}
  }


  type BoardsGetPayload<S extends boolean | null | undefined | BoardsDefaultArgs> = $Result.GetResult<Prisma.$BoardsPayload, S>

  type BoardsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BoardsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BoardsCountAggregateInputType | true
    }

  export interface BoardsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Boards'], meta: { name: 'Boards' } }
    /**
     * Find zero or one Boards that matches the filter.
     * @param {BoardsFindUniqueArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BoardsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsFindUniqueArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Boards that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BoardsFindUniqueOrThrowArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BoardsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsFindFirstArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BoardsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindFirstArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Boards that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsFindFirstOrThrowArgs} args - Arguments to find a Boards
     * @example
     * // Get one Boards
     * const boards = await prisma.boards.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BoardsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Boards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boards
     * const boards = await prisma.boards.findMany()
     * 
     * // Get first 10 Boards
     * const boards = await prisma.boards.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boardsWithIdOnly = await prisma.boards.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BoardsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Boards.
     * @param {BoardsCreateArgs} args - Arguments to create a Boards.
     * @example
     * // Create one Boards
     * const Boards = await prisma.boards.create({
     *   data: {
     *     // ... data to create a Boards
     *   }
     * })
     * 
    **/
    create<T extends BoardsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsCreateArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Boards.
     *     @param {BoardsCreateManyArgs} args - Arguments to create many Boards.
     *     @example
     *     // Create many Boards
     *     const boards = await prisma.boards.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BoardsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Boards.
     * @param {BoardsDeleteArgs} args - Arguments to delete one Boards.
     * @example
     * // Delete one Boards
     * const Boards = await prisma.boards.delete({
     *   where: {
     *     // ... filter to delete one Boards
     *   }
     * })
     * 
    **/
    delete<T extends BoardsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsDeleteArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Boards.
     * @param {BoardsUpdateArgs} args - Arguments to update one Boards.
     * @example
     * // Update one Boards
     * const boards = await prisma.boards.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BoardsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsUpdateArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Boards.
     * @param {BoardsDeleteManyArgs} args - Arguments to filter Boards to delete.
     * @example
     * // Delete a few Boards
     * const { count } = await prisma.boards.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BoardsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BoardsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boards
     * const boards = await prisma.boards.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BoardsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Boards.
     * @param {BoardsUpsertArgs} args - Arguments to update or create a Boards.
     * @example
     * // Update or create a Boards
     * const boards = await prisma.boards.upsert({
     *   create: {
     *     // ... data to create a Boards
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boards we want to update
     *   }
     * })
    **/
    upsert<T extends BoardsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BoardsUpsertArgs<ExtArgs>>
    ): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsCountArgs} args - Arguments to filter Boards to count.
     * @example
     * // Count the number of Boards
     * const count = await prisma.boards.count({
     *   where: {
     *     // ... the filter for the Boards we want to count
     *   }
     * })
    **/
    count<T extends BoardsCountArgs>(
      args?: Subset<T, BoardsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BoardsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BoardsAggregateArgs>(args: Subset<T, BoardsAggregateArgs>): Prisma.PrismaPromise<GetBoardsAggregateType<T>>

    /**
     * Group by Boards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BoardsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BoardsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BoardsGroupByArgs['orderBy'] }
        : { orderBy?: BoardsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BoardsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoardsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Boards model
   */
  readonly fields: BoardsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Boards.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BoardsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    column<T extends Boards$columnArgs<ExtArgs> = {}>(args?: Subset<T, Boards$columnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Boards model
   */ 
  interface BoardsFieldRefs {
    readonly id: FieldRef<"Boards", 'String'>
    readonly name: FieldRef<"Boards", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Boards findUnique
   */
  export type BoardsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards findUniqueOrThrow
   */
  export type BoardsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards findFirst
   */
  export type BoardsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardsScalarFieldEnum | BoardsScalarFieldEnum[]
  }

  /**
   * Boards findFirstOrThrow
   */
  export type BoardsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Boards.
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Boards.
     */
    distinct?: BoardsScalarFieldEnum | BoardsScalarFieldEnum[]
  }

  /**
   * Boards findMany
   */
  export type BoardsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter, which Boards to fetch.
     */
    where?: BoardsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Boards to fetch.
     */
    orderBy?: BoardsOrderByWithRelationInput | BoardsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Boards.
     */
    cursor?: BoardsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Boards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Boards.
     */
    skip?: number
    distinct?: BoardsScalarFieldEnum | BoardsScalarFieldEnum[]
  }

  /**
   * Boards create
   */
  export type BoardsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * The data needed to create a Boards.
     */
    data: XOR<BoardsCreateInput, BoardsUncheckedCreateInput>
  }

  /**
   * Boards createMany
   */
  export type BoardsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Boards.
     */
    data: BoardsCreateManyInput | BoardsCreateManyInput[]
  }

  /**
   * Boards update
   */
  export type BoardsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * The data needed to update a Boards.
     */
    data: XOR<BoardsUpdateInput, BoardsUncheckedUpdateInput>
    /**
     * Choose, which Boards to update.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards updateMany
   */
  export type BoardsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Boards.
     */
    data: XOR<BoardsUpdateManyMutationInput, BoardsUncheckedUpdateManyInput>
    /**
     * Filter which Boards to update
     */
    where?: BoardsWhereInput
  }

  /**
   * Boards upsert
   */
  export type BoardsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * The filter to search for the Boards to update in case it exists.
     */
    where: BoardsWhereUniqueInput
    /**
     * In case the Boards found by the `where` argument doesn't exist, create a new Boards with this data.
     */
    create: XOR<BoardsCreateInput, BoardsUncheckedCreateInput>
    /**
     * In case the Boards was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BoardsUpdateInput, BoardsUncheckedUpdateInput>
  }

  /**
   * Boards delete
   */
  export type BoardsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
    /**
     * Filter which Boards to delete.
     */
    where: BoardsWhereUniqueInput
  }

  /**
   * Boards deleteMany
   */
  export type BoardsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Boards to delete
     */
    where?: BoardsWhereInput
  }

  /**
   * Boards.column
   */
  export type Boards$columnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    where?: ColumnsWhereInput
    orderBy?: ColumnsOrderByWithRelationInput | ColumnsOrderByWithRelationInput[]
    cursor?: ColumnsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColumnsScalarFieldEnum | ColumnsScalarFieldEnum[]
  }

  /**
   * Boards without action
   */
  export type BoardsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Boards
     */
    select?: BoardsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BoardsInclude<ExtArgs> | null
  }


  /**
   * Model Columns
   */

  export type AggregateColumns = {
    _count: ColumnsCountAggregateOutputType | null
    _min: ColumnsMinAggregateOutputType | null
    _max: ColumnsMaxAggregateOutputType | null
  }

  export type ColumnsMinAggregateOutputType = {
    id: string | null
    name: string | null
    boardId: string | null
  }

  export type ColumnsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    boardId: string | null
  }

  export type ColumnsCountAggregateOutputType = {
    id: number
    name: number
    boardId: number
    _all: number
  }


  export type ColumnsMinAggregateInputType = {
    id?: true
    name?: true
    boardId?: true
  }

  export type ColumnsMaxAggregateInputType = {
    id?: true
    name?: true
    boardId?: true
  }

  export type ColumnsCountAggregateInputType = {
    id?: true
    name?: true
    boardId?: true
    _all?: true
  }

  export type ColumnsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Columns to aggregate.
     */
    where?: ColumnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columns to fetch.
     */
    orderBy?: ColumnsOrderByWithRelationInput | ColumnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColumnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Columns
    **/
    _count?: true | ColumnsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColumnsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColumnsMaxAggregateInputType
  }

  export type GetColumnsAggregateType<T extends ColumnsAggregateArgs> = {
        [P in keyof T & keyof AggregateColumns]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColumns[P]>
      : GetScalarType<T[P], AggregateColumns[P]>
  }




  export type ColumnsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColumnsWhereInput
    orderBy?: ColumnsOrderByWithAggregationInput | ColumnsOrderByWithAggregationInput[]
    by: ColumnsScalarFieldEnum[] | ColumnsScalarFieldEnum
    having?: ColumnsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColumnsCountAggregateInputType | true
    _min?: ColumnsMinAggregateInputType
    _max?: ColumnsMaxAggregateInputType
  }

  export type ColumnsGroupByOutputType = {
    id: string
    name: string
    boardId: string
    _count: ColumnsCountAggregateOutputType | null
    _min: ColumnsMinAggregateOutputType | null
    _max: ColumnsMaxAggregateOutputType | null
  }

  type GetColumnsGroupByPayload<T extends ColumnsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColumnsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColumnsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColumnsGroupByOutputType[P]>
            : GetScalarType<T[P], ColumnsGroupByOutputType[P]>
        }
      >
    >


  export type ColumnsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    boardId?: boolean
    board?: boolean | BoardsDefaultArgs<ExtArgs>
    task?: boolean | Columns$taskArgs<ExtArgs>
    _count?: boolean | ColumnsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["columns"]>

  export type ColumnsSelectScalar = {
    id?: boolean
    name?: boolean
    boardId?: boolean
  }


  export type ColumnsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    board?: boolean | BoardsDefaultArgs<ExtArgs>
    task?: boolean | Columns$taskArgs<ExtArgs>
    _count?: boolean | ColumnsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ColumnsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Columns"
    objects: {
      board: Prisma.$BoardsPayload<ExtArgs>
      task: Prisma.$TasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      boardId: string
    }, ExtArgs["result"]["columns"]>
    composites: {}
  }


  type ColumnsGetPayload<S extends boolean | null | undefined | ColumnsDefaultArgs> = $Result.GetResult<Prisma.$ColumnsPayload, S>

  type ColumnsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ColumnsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ColumnsCountAggregateInputType | true
    }

  export interface ColumnsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Columns'], meta: { name: 'Columns' } }
    /**
     * Find zero or one Columns that matches the filter.
     * @param {ColumnsFindUniqueArgs} args - Arguments to find a Columns
     * @example
     * // Get one Columns
     * const columns = await prisma.columns.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ColumnsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ColumnsFindUniqueArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Columns that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ColumnsFindUniqueOrThrowArgs} args - Arguments to find a Columns
     * @example
     * // Get one Columns
     * const columns = await prisma.columns.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ColumnsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ColumnsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Columns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsFindFirstArgs} args - Arguments to find a Columns
     * @example
     * // Get one Columns
     * const columns = await prisma.columns.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ColumnsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ColumnsFindFirstArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Columns that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsFindFirstOrThrowArgs} args - Arguments to find a Columns
     * @example
     * // Get one Columns
     * const columns = await prisma.columns.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ColumnsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ColumnsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Columns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Columns
     * const columns = await prisma.columns.findMany()
     * 
     * // Get first 10 Columns
     * const columns = await prisma.columns.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const columnsWithIdOnly = await prisma.columns.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ColumnsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColumnsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Columns.
     * @param {ColumnsCreateArgs} args - Arguments to create a Columns.
     * @example
     * // Create one Columns
     * const Columns = await prisma.columns.create({
     *   data: {
     *     // ... data to create a Columns
     *   }
     * })
     * 
    **/
    create<T extends ColumnsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ColumnsCreateArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Columns.
     *     @param {ColumnsCreateManyArgs} args - Arguments to create many Columns.
     *     @example
     *     // Create many Columns
     *     const columns = await prisma.columns.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ColumnsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColumnsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Columns.
     * @param {ColumnsDeleteArgs} args - Arguments to delete one Columns.
     * @example
     * // Delete one Columns
     * const Columns = await prisma.columns.delete({
     *   where: {
     *     // ... filter to delete one Columns
     *   }
     * })
     * 
    **/
    delete<T extends ColumnsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ColumnsDeleteArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Columns.
     * @param {ColumnsUpdateArgs} args - Arguments to update one Columns.
     * @example
     * // Update one Columns
     * const columns = await prisma.columns.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ColumnsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ColumnsUpdateArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Columns.
     * @param {ColumnsDeleteManyArgs} args - Arguments to filter Columns to delete.
     * @example
     * // Delete a few Columns
     * const { count } = await prisma.columns.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ColumnsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ColumnsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Columns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Columns
     * const columns = await prisma.columns.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ColumnsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ColumnsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Columns.
     * @param {ColumnsUpsertArgs} args - Arguments to update or create a Columns.
     * @example
     * // Update or create a Columns
     * const columns = await prisma.columns.upsert({
     *   create: {
     *     // ... data to create a Columns
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Columns we want to update
     *   }
     * })
    **/
    upsert<T extends ColumnsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ColumnsUpsertArgs<ExtArgs>>
    ): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Columns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsCountArgs} args - Arguments to filter Columns to count.
     * @example
     * // Count the number of Columns
     * const count = await prisma.columns.count({
     *   where: {
     *     // ... the filter for the Columns we want to count
     *   }
     * })
    **/
    count<T extends ColumnsCountArgs>(
      args?: Subset<T, ColumnsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColumnsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Columns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColumnsAggregateArgs>(args: Subset<T, ColumnsAggregateArgs>): Prisma.PrismaPromise<GetColumnsAggregateType<T>>

    /**
     * Group by Columns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColumnsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColumnsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColumnsGroupByArgs['orderBy'] }
        : { orderBy?: ColumnsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColumnsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColumnsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Columns model
   */
  readonly fields: ColumnsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Columns.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColumnsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    board<T extends BoardsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BoardsDefaultArgs<ExtArgs>>): Prisma__BoardsClient<$Result.GetResult<Prisma.$BoardsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    task<T extends Columns$taskArgs<ExtArgs> = {}>(args?: Subset<T, Columns$taskArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Columns model
   */ 
  interface ColumnsFieldRefs {
    readonly id: FieldRef<"Columns", 'String'>
    readonly name: FieldRef<"Columns", 'String'>
    readonly boardId: FieldRef<"Columns", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Columns findUnique
   */
  export type ColumnsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * Filter, which Columns to fetch.
     */
    where: ColumnsWhereUniqueInput
  }

  /**
   * Columns findUniqueOrThrow
   */
  export type ColumnsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * Filter, which Columns to fetch.
     */
    where: ColumnsWhereUniqueInput
  }

  /**
   * Columns findFirst
   */
  export type ColumnsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * Filter, which Columns to fetch.
     */
    where?: ColumnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columns to fetch.
     */
    orderBy?: ColumnsOrderByWithRelationInput | ColumnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Columns.
     */
    cursor?: ColumnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Columns.
     */
    distinct?: ColumnsScalarFieldEnum | ColumnsScalarFieldEnum[]
  }

  /**
   * Columns findFirstOrThrow
   */
  export type ColumnsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * Filter, which Columns to fetch.
     */
    where?: ColumnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columns to fetch.
     */
    orderBy?: ColumnsOrderByWithRelationInput | ColumnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Columns.
     */
    cursor?: ColumnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Columns.
     */
    distinct?: ColumnsScalarFieldEnum | ColumnsScalarFieldEnum[]
  }

  /**
   * Columns findMany
   */
  export type ColumnsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * Filter, which Columns to fetch.
     */
    where?: ColumnsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Columns to fetch.
     */
    orderBy?: ColumnsOrderByWithRelationInput | ColumnsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Columns.
     */
    cursor?: ColumnsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Columns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Columns.
     */
    skip?: number
    distinct?: ColumnsScalarFieldEnum | ColumnsScalarFieldEnum[]
  }

  /**
   * Columns create
   */
  export type ColumnsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * The data needed to create a Columns.
     */
    data: XOR<ColumnsCreateInput, ColumnsUncheckedCreateInput>
  }

  /**
   * Columns createMany
   */
  export type ColumnsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Columns.
     */
    data: ColumnsCreateManyInput | ColumnsCreateManyInput[]
  }

  /**
   * Columns update
   */
  export type ColumnsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * The data needed to update a Columns.
     */
    data: XOR<ColumnsUpdateInput, ColumnsUncheckedUpdateInput>
    /**
     * Choose, which Columns to update.
     */
    where: ColumnsWhereUniqueInput
  }

  /**
   * Columns updateMany
   */
  export type ColumnsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Columns.
     */
    data: XOR<ColumnsUpdateManyMutationInput, ColumnsUncheckedUpdateManyInput>
    /**
     * Filter which Columns to update
     */
    where?: ColumnsWhereInput
  }

  /**
   * Columns upsert
   */
  export type ColumnsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * The filter to search for the Columns to update in case it exists.
     */
    where: ColumnsWhereUniqueInput
    /**
     * In case the Columns found by the `where` argument doesn't exist, create a new Columns with this data.
     */
    create: XOR<ColumnsCreateInput, ColumnsUncheckedCreateInput>
    /**
     * In case the Columns was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColumnsUpdateInput, ColumnsUncheckedUpdateInput>
  }

  /**
   * Columns delete
   */
  export type ColumnsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
    /**
     * Filter which Columns to delete.
     */
    where: ColumnsWhereUniqueInput
  }

  /**
   * Columns deleteMany
   */
  export type ColumnsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Columns to delete
     */
    where?: ColumnsWhereInput
  }

  /**
   * Columns.task
   */
  export type Columns$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    cursor?: TasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Columns without action
   */
  export type ColumnsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Columns
     */
    select?: ColumnsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColumnsInclude<ExtArgs> | null
  }


  /**
   * Model Tasks
   */

  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksMinAggregateOutputType = {
    Id: string | null
    text: string | null
    columnID: string | null
  }

  export type TasksMaxAggregateOutputType = {
    Id: string | null
    text: string | null
    columnID: string | null
  }

  export type TasksCountAggregateOutputType = {
    Id: number
    text: number
    columnID: number
    _all: number
  }


  export type TasksMinAggregateInputType = {
    Id?: true
    text?: true
    columnID?: true
  }

  export type TasksMaxAggregateInputType = {
    Id?: true
    text?: true
    columnID?: true
  }

  export type TasksCountAggregateInputType = {
    Id?: true
    text?: true
    columnID?: true
    _all?: true
  }

  export type TasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to aggregate.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type TasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TasksWhereInput
    orderBy?: TasksOrderByWithAggregationInput | TasksOrderByWithAggregationInput[]
    by: TasksScalarFieldEnum[] | TasksScalarFieldEnum
    having?: TasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }

  export type TasksGroupByOutputType = {
    Id: string
    text: string
    columnID: string
    _count: TasksCountAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends TasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type TasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Id?: boolean
    text?: boolean
    columnID?: boolean
    columns?: boolean | ColumnsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type TasksSelectScalar = {
    Id?: boolean
    text?: boolean
    columnID?: boolean
  }


  export type TasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columns?: boolean | ColumnsDefaultArgs<ExtArgs>
  }


  export type $TasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tasks"
    objects: {
      columns: Prisma.$ColumnsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Id: string
      text: string
      columnID: string
    }, ExtArgs["result"]["tasks"]>
    composites: {}
  }


  type TasksGetPayload<S extends boolean | null | undefined | TasksDefaultArgs> = $Result.GetResult<Prisma.$TasksPayload, S>

  type TasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TasksFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface TasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tasks'], meta: { name: 'Tasks' } }
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {TasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TasksFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TasksFindUniqueArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tasks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TasksFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TasksFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TasksFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TasksFindFirstArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TasksFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TasksFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends TasksFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TasksFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tasks.
     * @param {TasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
    **/
    create<T extends TasksCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TasksCreateArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tasks.
     *     @param {TasksCreateManyArgs} args - Arguments to create many Tasks.
     *     @example
     *     // Create many Tasks
     *     const tasks = await prisma.tasks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TasksCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TasksCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tasks.
     * @param {TasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
    **/
    delete<T extends TasksDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TasksDeleteArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tasks.
     * @param {TasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TasksUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TasksUpdateArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TasksDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TasksDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TasksUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TasksUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tasks.
     * @param {TasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
    **/
    upsert<T extends TasksUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TasksUpsertArgs<ExtArgs>>
    ): Prisma__TasksClient<$Result.GetResult<Prisma.$TasksPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TasksCountArgs>(
      args?: Subset<T, TasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TasksGroupByArgs['orderBy'] }
        : { orderBy?: TasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tasks model
   */
  readonly fields: TasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    columns<T extends ColumnsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ColumnsDefaultArgs<ExtArgs>>): Prisma__ColumnsClient<$Result.GetResult<Prisma.$ColumnsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tasks model
   */ 
  interface TasksFieldRefs {
    readonly Id: FieldRef<"Tasks", 'String'>
    readonly text: FieldRef<"Tasks", 'String'>
    readonly columnID: FieldRef<"Tasks", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tasks findUnique
   */
  export type TasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks findUniqueOrThrow
   */
  export type TasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks findFirst
   */
  export type TasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks findFirstOrThrow
   */
  export type TasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks findMany
   */
  export type TasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TasksOrderByWithRelationInput | TasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * Tasks create
   */
  export type TasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * The data needed to create a Tasks.
     */
    data: XOR<TasksCreateInput, TasksUncheckedCreateInput>
  }

  /**
   * Tasks createMany
   */
  export type TasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TasksCreateManyInput | TasksCreateManyInput[]
  }

  /**
   * Tasks update
   */
  export type TasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * The data needed to update a Tasks.
     */
    data: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
    /**
     * Choose, which Tasks to update.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks updateMany
   */
  export type TasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TasksWhereInput
  }

  /**
   * Tasks upsert
   */
  export type TasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * The filter to search for the Tasks to update in case it exists.
     */
    where: TasksWhereUniqueInput
    /**
     * In case the Tasks found by the `where` argument doesn't exist, create a new Tasks with this data.
     */
    create: XOR<TasksCreateInput, TasksUncheckedCreateInput>
    /**
     * In case the Tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TasksUpdateInput, TasksUncheckedUpdateInput>
  }

  /**
   * Tasks delete
   */
  export type TasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
    /**
     * Filter which Tasks to delete.
     */
    where: TasksWhereUniqueInput
  }

  /**
   * Tasks deleteMany
   */
  export type TasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TasksWhereInput
  }

  /**
   * Tasks without action
   */
  export type TasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tasks
     */
    select?: TasksSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TasksInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BoardsScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type BoardsScalarFieldEnum = (typeof BoardsScalarFieldEnum)[keyof typeof BoardsScalarFieldEnum]


  export const ColumnsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    boardId: 'boardId'
  };

  export type ColumnsScalarFieldEnum = (typeof ColumnsScalarFieldEnum)[keyof typeof ColumnsScalarFieldEnum]


  export const TasksScalarFieldEnum: {
    Id: 'Id',
    text: 'text',
    columnID: 'columnID'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type BoardsWhereInput = {
    AND?: BoardsWhereInput | BoardsWhereInput[]
    OR?: BoardsWhereInput[]
    NOT?: BoardsWhereInput | BoardsWhereInput[]
    id?: StringFilter<"Boards"> | string
    name?: StringFilter<"Boards"> | string
    column?: ColumnsListRelationFilter
  }

  export type BoardsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    column?: ColumnsOrderByRelationAggregateInput
  }

  export type BoardsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BoardsWhereInput | BoardsWhereInput[]
    OR?: BoardsWhereInput[]
    NOT?: BoardsWhereInput | BoardsWhereInput[]
    name?: StringFilter<"Boards"> | string
    column?: ColumnsListRelationFilter
  }, "id">

  export type BoardsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: BoardsCountOrderByAggregateInput
    _max?: BoardsMaxOrderByAggregateInput
    _min?: BoardsMinOrderByAggregateInput
  }

  export type BoardsScalarWhereWithAggregatesInput = {
    AND?: BoardsScalarWhereWithAggregatesInput | BoardsScalarWhereWithAggregatesInput[]
    OR?: BoardsScalarWhereWithAggregatesInput[]
    NOT?: BoardsScalarWhereWithAggregatesInput | BoardsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Boards"> | string
    name?: StringWithAggregatesFilter<"Boards"> | string
  }

  export type ColumnsWhereInput = {
    AND?: ColumnsWhereInput | ColumnsWhereInput[]
    OR?: ColumnsWhereInput[]
    NOT?: ColumnsWhereInput | ColumnsWhereInput[]
    id?: StringFilter<"Columns"> | string
    name?: StringFilter<"Columns"> | string
    boardId?: StringFilter<"Columns"> | string
    board?: XOR<BoardsRelationFilter, BoardsWhereInput>
    task?: TasksListRelationFilter
  }

  export type ColumnsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    boardId?: SortOrder
    board?: BoardsOrderByWithRelationInput
    task?: TasksOrderByRelationAggregateInput
  }

  export type ColumnsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ColumnsWhereInput | ColumnsWhereInput[]
    OR?: ColumnsWhereInput[]
    NOT?: ColumnsWhereInput | ColumnsWhereInput[]
    name?: StringFilter<"Columns"> | string
    boardId?: StringFilter<"Columns"> | string
    board?: XOR<BoardsRelationFilter, BoardsWhereInput>
    task?: TasksListRelationFilter
  }, "id">

  export type ColumnsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    boardId?: SortOrder
    _count?: ColumnsCountOrderByAggregateInput
    _max?: ColumnsMaxOrderByAggregateInput
    _min?: ColumnsMinOrderByAggregateInput
  }

  export type ColumnsScalarWhereWithAggregatesInput = {
    AND?: ColumnsScalarWhereWithAggregatesInput | ColumnsScalarWhereWithAggregatesInput[]
    OR?: ColumnsScalarWhereWithAggregatesInput[]
    NOT?: ColumnsScalarWhereWithAggregatesInput | ColumnsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Columns"> | string
    name?: StringWithAggregatesFilter<"Columns"> | string
    boardId?: StringWithAggregatesFilter<"Columns"> | string
  }

  export type TasksWhereInput = {
    AND?: TasksWhereInput | TasksWhereInput[]
    OR?: TasksWhereInput[]
    NOT?: TasksWhereInput | TasksWhereInput[]
    Id?: StringFilter<"Tasks"> | string
    text?: StringFilter<"Tasks"> | string
    columnID?: StringFilter<"Tasks"> | string
    columns?: XOR<ColumnsRelationFilter, ColumnsWhereInput>
  }

  export type TasksOrderByWithRelationInput = {
    Id?: SortOrder
    text?: SortOrder
    columnID?: SortOrder
    columns?: ColumnsOrderByWithRelationInput
  }

  export type TasksWhereUniqueInput = Prisma.AtLeast<{
    Id?: string
    AND?: TasksWhereInput | TasksWhereInput[]
    OR?: TasksWhereInput[]
    NOT?: TasksWhereInput | TasksWhereInput[]
    text?: StringFilter<"Tasks"> | string
    columnID?: StringFilter<"Tasks"> | string
    columns?: XOR<ColumnsRelationFilter, ColumnsWhereInput>
  }, "Id">

  export type TasksOrderByWithAggregationInput = {
    Id?: SortOrder
    text?: SortOrder
    columnID?: SortOrder
    _count?: TasksCountOrderByAggregateInput
    _max?: TasksMaxOrderByAggregateInput
    _min?: TasksMinOrderByAggregateInput
  }

  export type TasksScalarWhereWithAggregatesInput = {
    AND?: TasksScalarWhereWithAggregatesInput | TasksScalarWhereWithAggregatesInput[]
    OR?: TasksScalarWhereWithAggregatesInput[]
    NOT?: TasksScalarWhereWithAggregatesInput | TasksScalarWhereWithAggregatesInput[]
    Id?: StringWithAggregatesFilter<"Tasks"> | string
    text?: StringWithAggregatesFilter<"Tasks"> | string
    columnID?: StringWithAggregatesFilter<"Tasks"> | string
  }

  export type BoardsCreateInput = {
    id: string
    name: string
    column?: ColumnsCreateNestedManyWithoutBoardInput
  }

  export type BoardsUncheckedCreateInput = {
    id: string
    name: string
    column?: ColumnsUncheckedCreateNestedManyWithoutBoardInput
  }

  export type BoardsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    column?: ColumnsUpdateManyWithoutBoardNestedInput
  }

  export type BoardsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    column?: ColumnsUncheckedUpdateManyWithoutBoardNestedInput
  }

  export type BoardsCreateManyInput = {
    id: string
    name: string
  }

  export type BoardsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BoardsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnsCreateInput = {
    id: string
    name: string
    board: BoardsCreateNestedOneWithoutColumnInput
    task?: TasksCreateNestedManyWithoutColumnsInput
  }

  export type ColumnsUncheckedCreateInput = {
    id: string
    name: string
    boardId: string
    task?: TasksUncheckedCreateNestedManyWithoutColumnsInput
  }

  export type ColumnsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    board?: BoardsUpdateOneRequiredWithoutColumnNestedInput
    task?: TasksUpdateManyWithoutColumnsNestedInput
  }

  export type ColumnsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
    task?: TasksUncheckedUpdateManyWithoutColumnsNestedInput
  }

  export type ColumnsCreateManyInput = {
    id: string
    name: string
    boardId: string
  }

  export type ColumnsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
  }

  export type TasksCreateInput = {
    Id: string
    text: string
    columns: ColumnsCreateNestedOneWithoutTaskInput
  }

  export type TasksUncheckedCreateInput = {
    Id: string
    text: string
    columnID: string
  }

  export type TasksUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    columns?: ColumnsUpdateOneRequiredWithoutTaskNestedInput
  }

  export type TasksUncheckedUpdateInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    columnID?: StringFieldUpdateOperationsInput | string
  }

  export type TasksCreateManyInput = {
    Id: string
    text: string
    columnID: string
  }

  export type TasksUpdateManyMutationInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TasksUncheckedUpdateManyInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    columnID?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ColumnsListRelationFilter = {
    every?: ColumnsWhereInput
    some?: ColumnsWhereInput
    none?: ColumnsWhereInput
  }

  export type ColumnsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BoardsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BoardsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type BoardsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoardsRelationFilter = {
    is?: BoardsWhereInput
    isNot?: BoardsWhereInput
  }

  export type TasksListRelationFilter = {
    every?: TasksWhereInput
    some?: TasksWhereInput
    none?: TasksWhereInput
  }

  export type TasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColumnsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    boardId?: SortOrder
  }

  export type ColumnsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    boardId?: SortOrder
  }

  export type ColumnsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    boardId?: SortOrder
  }

  export type ColumnsRelationFilter = {
    is?: ColumnsWhereInput
    isNot?: ColumnsWhereInput
  }

  export type TasksCountOrderByAggregateInput = {
    Id?: SortOrder
    text?: SortOrder
    columnID?: SortOrder
  }

  export type TasksMaxOrderByAggregateInput = {
    Id?: SortOrder
    text?: SortOrder
    columnID?: SortOrder
  }

  export type TasksMinOrderByAggregateInput = {
    Id?: SortOrder
    text?: SortOrder
    columnID?: SortOrder
  }

  export type ColumnsCreateNestedManyWithoutBoardInput = {
    create?: XOR<ColumnsCreateWithoutBoardInput, ColumnsUncheckedCreateWithoutBoardInput> | ColumnsCreateWithoutBoardInput[] | ColumnsUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ColumnsCreateOrConnectWithoutBoardInput | ColumnsCreateOrConnectWithoutBoardInput[]
    createMany?: ColumnsCreateManyBoardInputEnvelope
    connect?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
  }

  export type ColumnsUncheckedCreateNestedManyWithoutBoardInput = {
    create?: XOR<ColumnsCreateWithoutBoardInput, ColumnsUncheckedCreateWithoutBoardInput> | ColumnsCreateWithoutBoardInput[] | ColumnsUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ColumnsCreateOrConnectWithoutBoardInput | ColumnsCreateOrConnectWithoutBoardInput[]
    createMany?: ColumnsCreateManyBoardInputEnvelope
    connect?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ColumnsUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ColumnsCreateWithoutBoardInput, ColumnsUncheckedCreateWithoutBoardInput> | ColumnsCreateWithoutBoardInput[] | ColumnsUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ColumnsCreateOrConnectWithoutBoardInput | ColumnsCreateOrConnectWithoutBoardInput[]
    upsert?: ColumnsUpsertWithWhereUniqueWithoutBoardInput | ColumnsUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ColumnsCreateManyBoardInputEnvelope
    set?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    disconnect?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    delete?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    connect?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    update?: ColumnsUpdateWithWhereUniqueWithoutBoardInput | ColumnsUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ColumnsUpdateManyWithWhereWithoutBoardInput | ColumnsUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ColumnsScalarWhereInput | ColumnsScalarWhereInput[]
  }

  export type ColumnsUncheckedUpdateManyWithoutBoardNestedInput = {
    create?: XOR<ColumnsCreateWithoutBoardInput, ColumnsUncheckedCreateWithoutBoardInput> | ColumnsCreateWithoutBoardInput[] | ColumnsUncheckedCreateWithoutBoardInput[]
    connectOrCreate?: ColumnsCreateOrConnectWithoutBoardInput | ColumnsCreateOrConnectWithoutBoardInput[]
    upsert?: ColumnsUpsertWithWhereUniqueWithoutBoardInput | ColumnsUpsertWithWhereUniqueWithoutBoardInput[]
    createMany?: ColumnsCreateManyBoardInputEnvelope
    set?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    disconnect?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    delete?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    connect?: ColumnsWhereUniqueInput | ColumnsWhereUniqueInput[]
    update?: ColumnsUpdateWithWhereUniqueWithoutBoardInput | ColumnsUpdateWithWhereUniqueWithoutBoardInput[]
    updateMany?: ColumnsUpdateManyWithWhereWithoutBoardInput | ColumnsUpdateManyWithWhereWithoutBoardInput[]
    deleteMany?: ColumnsScalarWhereInput | ColumnsScalarWhereInput[]
  }

  export type BoardsCreateNestedOneWithoutColumnInput = {
    create?: XOR<BoardsCreateWithoutColumnInput, BoardsUncheckedCreateWithoutColumnInput>
    connectOrCreate?: BoardsCreateOrConnectWithoutColumnInput
    connect?: BoardsWhereUniqueInput
  }

  export type TasksCreateNestedManyWithoutColumnsInput = {
    create?: XOR<TasksCreateWithoutColumnsInput, TasksUncheckedCreateWithoutColumnsInput> | TasksCreateWithoutColumnsInput[] | TasksUncheckedCreateWithoutColumnsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutColumnsInput | TasksCreateOrConnectWithoutColumnsInput[]
    createMany?: TasksCreateManyColumnsInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type TasksUncheckedCreateNestedManyWithoutColumnsInput = {
    create?: XOR<TasksCreateWithoutColumnsInput, TasksUncheckedCreateWithoutColumnsInput> | TasksCreateWithoutColumnsInput[] | TasksUncheckedCreateWithoutColumnsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutColumnsInput | TasksCreateOrConnectWithoutColumnsInput[]
    createMany?: TasksCreateManyColumnsInputEnvelope
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
  }

  export type BoardsUpdateOneRequiredWithoutColumnNestedInput = {
    create?: XOR<BoardsCreateWithoutColumnInput, BoardsUncheckedCreateWithoutColumnInput>
    connectOrCreate?: BoardsCreateOrConnectWithoutColumnInput
    upsert?: BoardsUpsertWithoutColumnInput
    connect?: BoardsWhereUniqueInput
    update?: XOR<XOR<BoardsUpdateToOneWithWhereWithoutColumnInput, BoardsUpdateWithoutColumnInput>, BoardsUncheckedUpdateWithoutColumnInput>
  }

  export type TasksUpdateManyWithoutColumnsNestedInput = {
    create?: XOR<TasksCreateWithoutColumnsInput, TasksUncheckedCreateWithoutColumnsInput> | TasksCreateWithoutColumnsInput[] | TasksUncheckedCreateWithoutColumnsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutColumnsInput | TasksCreateOrConnectWithoutColumnsInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutColumnsInput | TasksUpsertWithWhereUniqueWithoutColumnsInput[]
    createMany?: TasksCreateManyColumnsInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutColumnsInput | TasksUpdateWithWhereUniqueWithoutColumnsInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutColumnsInput | TasksUpdateManyWithWhereWithoutColumnsInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type TasksUncheckedUpdateManyWithoutColumnsNestedInput = {
    create?: XOR<TasksCreateWithoutColumnsInput, TasksUncheckedCreateWithoutColumnsInput> | TasksCreateWithoutColumnsInput[] | TasksUncheckedCreateWithoutColumnsInput[]
    connectOrCreate?: TasksCreateOrConnectWithoutColumnsInput | TasksCreateOrConnectWithoutColumnsInput[]
    upsert?: TasksUpsertWithWhereUniqueWithoutColumnsInput | TasksUpsertWithWhereUniqueWithoutColumnsInput[]
    createMany?: TasksCreateManyColumnsInputEnvelope
    set?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    disconnect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    delete?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    connect?: TasksWhereUniqueInput | TasksWhereUniqueInput[]
    update?: TasksUpdateWithWhereUniqueWithoutColumnsInput | TasksUpdateWithWhereUniqueWithoutColumnsInput[]
    updateMany?: TasksUpdateManyWithWhereWithoutColumnsInput | TasksUpdateManyWithWhereWithoutColumnsInput[]
    deleteMany?: TasksScalarWhereInput | TasksScalarWhereInput[]
  }

  export type ColumnsCreateNestedOneWithoutTaskInput = {
    create?: XOR<ColumnsCreateWithoutTaskInput, ColumnsUncheckedCreateWithoutTaskInput>
    connectOrCreate?: ColumnsCreateOrConnectWithoutTaskInput
    connect?: ColumnsWhereUniqueInput
  }

  export type ColumnsUpdateOneRequiredWithoutTaskNestedInput = {
    create?: XOR<ColumnsCreateWithoutTaskInput, ColumnsUncheckedCreateWithoutTaskInput>
    connectOrCreate?: ColumnsCreateOrConnectWithoutTaskInput
    upsert?: ColumnsUpsertWithoutTaskInput
    connect?: ColumnsWhereUniqueInput
    update?: XOR<XOR<ColumnsUpdateToOneWithWhereWithoutTaskInput, ColumnsUpdateWithoutTaskInput>, ColumnsUncheckedUpdateWithoutTaskInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ColumnsCreateWithoutBoardInput = {
    id: string
    name: string
    task?: TasksCreateNestedManyWithoutColumnsInput
  }

  export type ColumnsUncheckedCreateWithoutBoardInput = {
    id: string
    name: string
    task?: TasksUncheckedCreateNestedManyWithoutColumnsInput
  }

  export type ColumnsCreateOrConnectWithoutBoardInput = {
    where: ColumnsWhereUniqueInput
    create: XOR<ColumnsCreateWithoutBoardInput, ColumnsUncheckedCreateWithoutBoardInput>
  }

  export type ColumnsCreateManyBoardInputEnvelope = {
    data: ColumnsCreateManyBoardInput | ColumnsCreateManyBoardInput[]
  }

  export type ColumnsUpsertWithWhereUniqueWithoutBoardInput = {
    where: ColumnsWhereUniqueInput
    update: XOR<ColumnsUpdateWithoutBoardInput, ColumnsUncheckedUpdateWithoutBoardInput>
    create: XOR<ColumnsCreateWithoutBoardInput, ColumnsUncheckedCreateWithoutBoardInput>
  }

  export type ColumnsUpdateWithWhereUniqueWithoutBoardInput = {
    where: ColumnsWhereUniqueInput
    data: XOR<ColumnsUpdateWithoutBoardInput, ColumnsUncheckedUpdateWithoutBoardInput>
  }

  export type ColumnsUpdateManyWithWhereWithoutBoardInput = {
    where: ColumnsScalarWhereInput
    data: XOR<ColumnsUpdateManyMutationInput, ColumnsUncheckedUpdateManyWithoutBoardInput>
  }

  export type ColumnsScalarWhereInput = {
    AND?: ColumnsScalarWhereInput | ColumnsScalarWhereInput[]
    OR?: ColumnsScalarWhereInput[]
    NOT?: ColumnsScalarWhereInput | ColumnsScalarWhereInput[]
    id?: StringFilter<"Columns"> | string
    name?: StringFilter<"Columns"> | string
    boardId?: StringFilter<"Columns"> | string
  }

  export type BoardsCreateWithoutColumnInput = {
    id: string
    name: string
  }

  export type BoardsUncheckedCreateWithoutColumnInput = {
    id: string
    name: string
  }

  export type BoardsCreateOrConnectWithoutColumnInput = {
    where: BoardsWhereUniqueInput
    create: XOR<BoardsCreateWithoutColumnInput, BoardsUncheckedCreateWithoutColumnInput>
  }

  export type TasksCreateWithoutColumnsInput = {
    Id: string
    text: string
  }

  export type TasksUncheckedCreateWithoutColumnsInput = {
    Id: string
    text: string
  }

  export type TasksCreateOrConnectWithoutColumnsInput = {
    where: TasksWhereUniqueInput
    create: XOR<TasksCreateWithoutColumnsInput, TasksUncheckedCreateWithoutColumnsInput>
  }

  export type TasksCreateManyColumnsInputEnvelope = {
    data: TasksCreateManyColumnsInput | TasksCreateManyColumnsInput[]
  }

  export type BoardsUpsertWithoutColumnInput = {
    update: XOR<BoardsUpdateWithoutColumnInput, BoardsUncheckedUpdateWithoutColumnInput>
    create: XOR<BoardsCreateWithoutColumnInput, BoardsUncheckedCreateWithoutColumnInput>
    where?: BoardsWhereInput
  }

  export type BoardsUpdateToOneWithWhereWithoutColumnInput = {
    where?: BoardsWhereInput
    data: XOR<BoardsUpdateWithoutColumnInput, BoardsUncheckedUpdateWithoutColumnInput>
  }

  export type BoardsUpdateWithoutColumnInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type BoardsUncheckedUpdateWithoutColumnInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TasksUpsertWithWhereUniqueWithoutColumnsInput = {
    where: TasksWhereUniqueInput
    update: XOR<TasksUpdateWithoutColumnsInput, TasksUncheckedUpdateWithoutColumnsInput>
    create: XOR<TasksCreateWithoutColumnsInput, TasksUncheckedCreateWithoutColumnsInput>
  }

  export type TasksUpdateWithWhereUniqueWithoutColumnsInput = {
    where: TasksWhereUniqueInput
    data: XOR<TasksUpdateWithoutColumnsInput, TasksUncheckedUpdateWithoutColumnsInput>
  }

  export type TasksUpdateManyWithWhereWithoutColumnsInput = {
    where: TasksScalarWhereInput
    data: XOR<TasksUpdateManyMutationInput, TasksUncheckedUpdateManyWithoutColumnsInput>
  }

  export type TasksScalarWhereInput = {
    AND?: TasksScalarWhereInput | TasksScalarWhereInput[]
    OR?: TasksScalarWhereInput[]
    NOT?: TasksScalarWhereInput | TasksScalarWhereInput[]
    Id?: StringFilter<"Tasks"> | string
    text?: StringFilter<"Tasks"> | string
    columnID?: StringFilter<"Tasks"> | string
  }

  export type ColumnsCreateWithoutTaskInput = {
    id: string
    name: string
    board: BoardsCreateNestedOneWithoutColumnInput
  }

  export type ColumnsUncheckedCreateWithoutTaskInput = {
    id: string
    name: string
    boardId: string
  }

  export type ColumnsCreateOrConnectWithoutTaskInput = {
    where: ColumnsWhereUniqueInput
    create: XOR<ColumnsCreateWithoutTaskInput, ColumnsUncheckedCreateWithoutTaskInput>
  }

  export type ColumnsUpsertWithoutTaskInput = {
    update: XOR<ColumnsUpdateWithoutTaskInput, ColumnsUncheckedUpdateWithoutTaskInput>
    create: XOR<ColumnsCreateWithoutTaskInput, ColumnsUncheckedCreateWithoutTaskInput>
    where?: ColumnsWhereInput
  }

  export type ColumnsUpdateToOneWithWhereWithoutTaskInput = {
    where?: ColumnsWhereInput
    data: XOR<ColumnsUpdateWithoutTaskInput, ColumnsUncheckedUpdateWithoutTaskInput>
  }

  export type ColumnsUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    board?: BoardsUpdateOneRequiredWithoutColumnNestedInput
  }

  export type ColumnsUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    boardId?: StringFieldUpdateOperationsInput | string
  }

  export type ColumnsCreateManyBoardInput = {
    id: string
    name: string
  }

  export type ColumnsUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    task?: TasksUpdateManyWithoutColumnsNestedInput
  }

  export type ColumnsUncheckedUpdateWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    task?: TasksUncheckedUpdateManyWithoutColumnsNestedInput
  }

  export type ColumnsUncheckedUpdateManyWithoutBoardInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TasksCreateManyColumnsInput = {
    Id: string
    text: string
  }

  export type TasksUpdateWithoutColumnsInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TasksUncheckedUpdateWithoutColumnsInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TasksUncheckedUpdateManyWithoutColumnsInput = {
    Id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BoardsCountOutputTypeDefaultArgs instead
     */
    export type BoardsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ColumnsCountOutputTypeDefaultArgs instead
     */
    export type ColumnsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ColumnsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BoardsDefaultArgs instead
     */
    export type BoardsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BoardsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ColumnsDefaultArgs instead
     */
    export type ColumnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ColumnsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TasksDefaultArgs instead
     */
    export type TasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TasksDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}